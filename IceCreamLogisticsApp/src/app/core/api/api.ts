/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.14.7.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable({
    providedIn: 'root'
})
export class AuthClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:5000";
    }

    login(loginDto: LoginDto) : Observable<string> {
        let url_ = this.baseUrl + "/auth";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(loginDto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLogin(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLogin(<any>response_);
                } catch (e) {
                    return <Observable<string>><any>_observableThrow(e);
                }
            } else
                return <Observable<string>><any>_observableThrow(response_);
        }));
    }

    protected processLogin(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(<any>null);
    }

    get() : Observable<string[]> {
        let url_ = this.baseUrl + "/auth";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<string[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<string[]>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<string[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string[]>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class ClientClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:5000";
    }

    get(offset: number | undefined, count: number | undefined, search: string | null | undefined) : Observable<LazyLoadingResponseOfClient> {
        let url_ = this.baseUrl + "/clients?";
        if (offset === null)
            throw new Error("The parameter 'offset' cannot be null.");
        else if (offset !== undefined)
            url_ += "Offset=" + encodeURIComponent("" + offset) + "&";
        if (count === null)
            throw new Error("The parameter 'count' cannot be null.");
        else if (count !== undefined)
            url_ += "Count=" + encodeURIComponent("" + count) + "&";
        if (search !== undefined && search !== null)
            url_ += "search=" + encodeURIComponent("" + search) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<LazyLoadingResponseOfClient>><any>_observableThrow(e);
                }
            } else
                return <Observable<LazyLoadingResponseOfClient>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<LazyLoadingResponseOfClient> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = LazyLoadingResponseOfClient.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<LazyLoadingResponseOfClient>(<any>null);
    }

    post(clientDto: ClientDto) : Observable<ClientDto> {
        let url_ = this.baseUrl + "/clients";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(clientDto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPost(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPost(<any>response_);
                } catch (e) {
                    return <Observable<ClientDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<ClientDto>><any>_observableThrow(response_);
        }));
    }

    protected processPost(response: HttpResponseBase): Observable<ClientDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ClientDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ClientDto>(<any>null);
    }

    put(clientDto: ClientDto) : Observable<ClientDto> {
        let url_ = this.baseUrl + "/clients";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(clientDto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPut(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPut(<any>response_);
                } catch (e) {
                    return <Observable<ClientDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<ClientDto>><any>_observableThrow(response_);
        }));
    }

    protected processPut(response: HttpResponseBase): Observable<ClientDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ClientDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ClientDto>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class DeliveryClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:5000";
    }

    get(id: number) : Observable<DeliveryDetailsDto> {
        let url_ = this.baseUrl + "/deliveries/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<DeliveryDetailsDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<DeliveryDetailsDto>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<DeliveryDetailsDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DeliveryDetailsDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DeliveryDetailsDto>(<any>null);
    }

    update(id: number, delivery: DeliveryEditDto) : Observable<DeliveryDetailsDto> {
        let url_ = this.baseUrl + "/deliveries/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(delivery);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<DeliveryDetailsDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<DeliveryDetailsDto>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<DeliveryDetailsDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DeliveryDetailsDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DeliveryDetailsDto>(<any>null);
    }

    create(delivery: DeliveryEditDto) : Observable<DeliveryDetailsDto> {
        let url_ = this.baseUrl + "/deliveries";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(delivery);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<DeliveryDetailsDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<DeliveryDetailsDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<DeliveryDetailsDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DeliveryDetailsDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DeliveryDetailsDto>(<any>null);
    }

    list(searchParams: DeliverySearchParamsDto | null | undefined, offset: number | undefined, count: number | undefined) : Observable<LazyLoadingResponseOfDeliveryShallow> {
        let url_ = this.baseUrl + "/deliveries?";
        if (searchParams !== undefined && searchParams !== null)
            url_ += "searchParams=" + encodeURIComponent("" + searchParams) + "&";
        if (offset === null)
            throw new Error("The parameter 'offset' cannot be null.");
        else if (offset !== undefined)
            url_ += "Offset=" + encodeURIComponent("" + offset) + "&";
        if (count === null)
            throw new Error("The parameter 'count' cannot be null.");
        else if (count !== undefined)
            url_ += "Count=" + encodeURIComponent("" + count) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processList(<any>response_);
                } catch (e) {
                    return <Observable<LazyLoadingResponseOfDeliveryShallow>><any>_observableThrow(e);
                }
            } else
                return <Observable<LazyLoadingResponseOfDeliveryShallow>><any>_observableThrow(response_);
        }));
    }

    protected processList(response: HttpResponseBase): Observable<LazyLoadingResponseOfDeliveryShallow> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = LazyLoadingResponseOfDeliveryShallow.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<LazyLoadingResponseOfDeliveryShallow>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class IngredientClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:5000";
    }

    get(offset: number | undefined, count: number | undefined, search: string | null | undefined) : Observable<LazyLoadingResponseOfIngredient> {
        let url_ = this.baseUrl + "/ingredients?";
        if (offset === null)
            throw new Error("The parameter 'offset' cannot be null.");
        else if (offset !== undefined)
            url_ += "Offset=" + encodeURIComponent("" + offset) + "&";
        if (count === null)
            throw new Error("The parameter 'count' cannot be null.");
        else if (count !== undefined)
            url_ += "Count=" + encodeURIComponent("" + count) + "&";
        if (search !== undefined && search !== null)
            url_ += "search=" + encodeURIComponent("" + search) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<LazyLoadingResponseOfIngredient>><any>_observableThrow(e);
                }
            } else
                return <Observable<LazyLoadingResponseOfIngredient>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<LazyLoadingResponseOfIngredient> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = LazyLoadingResponseOfIngredient.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<LazyLoadingResponseOfIngredient>(<any>null);
    }

    post(ingredientDto: IngredientCreateDto) : Observable<IngredientDto> {
        let url_ = this.baseUrl + "/ingredients";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(ingredientDto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPost(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPost(<any>response_);
                } catch (e) {
                    return <Observable<IngredientDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<IngredientDto>><any>_observableThrow(response_);
        }));
    }

    protected processPost(response: HttpResponseBase): Observable<IngredientDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IngredientDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IngredientDto>(<any>null);
    }

    put(ingredientDto: IngredientCreateDto) : Observable<IngredientDto> {
        let url_ = this.baseUrl + "/ingredients";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(ingredientDto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPut(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPut(<any>response_);
                } catch (e) {
                    return <Observable<IngredientDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<IngredientDto>><any>_observableThrow(response_);
        }));
    }

    protected processPut(response: HttpResponseBase): Observable<IngredientDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IngredientDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IngredientDto>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class InventoryClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:5000";
    }

    searchInventory(searchParams: InventorySearchParamsDto | null | undefined, offset: number | undefined, count: number | undefined) : Observable<LazyLoadingResponseOfInventoryStatusDto> {
        let url_ = this.baseUrl + "/inventory?";
        if (searchParams !== undefined && searchParams !== null)
            url_ += "searchParams=" + encodeURIComponent("" + searchParams) + "&";
        if (offset === null)
            throw new Error("The parameter 'offset' cannot be null.");
        else if (offset !== undefined)
            url_ += "Offset=" + encodeURIComponent("" + offset) + "&";
        if (count === null)
            throw new Error("The parameter 'count' cannot be null.");
        else if (count !== undefined)
            url_ += "Count=" + encodeURIComponent("" + count) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSearchInventory(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSearchInventory(<any>response_);
                } catch (e) {
                    return <Observable<LazyLoadingResponseOfInventoryStatusDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<LazyLoadingResponseOfInventoryStatusDto>><any>_observableThrow(response_);
        }));
    }

    protected processSearchInventory(response: HttpResponseBase): Observable<LazyLoadingResponseOfInventoryStatusDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = LazyLoadingResponseOfInventoryStatusDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<LazyLoadingResponseOfInventoryStatusDto>(<any>null);
    }

    getInventoryWarning() : Observable<InventoryWarningDto> {
        let url_ = this.baseUrl + "/inventory/warning";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetInventoryWarning(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetInventoryWarning(<any>response_);
                } catch (e) {
                    return <Observable<InventoryWarningDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<InventoryWarningDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetInventoryWarning(response: HttpResponseBase): Observable<InventoryWarningDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<InventoryWarningDto>(<any>null);
    }

    setInventory(id: number, amount: number) : Observable<InventoryStatusDto> {
        let url_ = this.baseUrl + "/inventory/{id}/set";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(amount);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSetInventory(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSetInventory(<any>response_);
                } catch (e) {
                    return <Observable<InventoryStatusDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<InventoryStatusDto>><any>_observableThrow(response_);
        }));
    }

    protected processSetInventory(response: HttpResponseBase): Observable<InventoryStatusDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = InventoryStatusDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<InventoryStatusDto>(<any>null);
    }

    addToInventory(id: number, amount: number) : Observable<InventoryStatusDto> {
        let url_ = this.baseUrl + "/inventory/{id}/add";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(amount);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddToInventory(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddToInventory(<any>response_);
                } catch (e) {
                    return <Observable<InventoryStatusDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<InventoryStatusDto>><any>_observableThrow(response_);
        }));
    }

    protected processAddToInventory(response: HttpResponseBase): Observable<InventoryStatusDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = InventoryStatusDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<InventoryStatusDto>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class MixingBatchClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:5000";
    }

    create(clientDto: MixingBatchCreateDto) : Observable<MixingBatchCreateDto> {
        let url_ = this.baseUrl + "/mixing";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(clientDto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<MixingBatchCreateDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<MixingBatchCreateDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<MixingBatchCreateDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MixingBatchCreateDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<MixingBatchCreateDto>(<any>null);
    }

    list(offset: number | undefined, count: number | undefined) : Observable<LazyLoadingResponseOfMixingBatchShallowDto> {
        let url_ = this.baseUrl + "/mixing?";
        if (offset === null)
            throw new Error("The parameter 'offset' cannot be null.");
        else if (offset !== undefined)
            url_ += "Offset=" + encodeURIComponent("" + offset) + "&";
        if (count === null)
            throw new Error("The parameter 'count' cannot be null.");
        else if (count !== undefined)
            url_ += "Count=" + encodeURIComponent("" + count) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processList(<any>response_);
                } catch (e) {
                    return <Observable<LazyLoadingResponseOfMixingBatchShallowDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<LazyLoadingResponseOfMixingBatchShallowDto>><any>_observableThrow(response_);
        }));
    }

    protected processList(response: HttpResponseBase): Observable<LazyLoadingResponseOfMixingBatchShallowDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = LazyLoadingResponseOfMixingBatchShallowDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<LazyLoadingResponseOfMixingBatchShallowDto>(<any>null);
    }

    administerAbsolute(id: number, members: MixingBatchCreateMemberDto[]) : Observable<MixingBatchDetailsDto> {
        let url_ = this.baseUrl + "/mixing/{id}/administer";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(members);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAdministerAbsolute(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAdministerAbsolute(<any>response_);
                } catch (e) {
                    return <Observable<MixingBatchDetailsDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<MixingBatchDetailsDto>><any>_observableThrow(response_);
        }));
    }

    protected processAdministerAbsolute(response: HttpResponseBase): Observable<MixingBatchDetailsDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MixingBatchDetailsDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<MixingBatchDetailsDto>(<any>null);
    }

    get(id: number) : Observable<MixingBatchDetailsDto> {
        let url_ = this.baseUrl + "/mixing/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<MixingBatchDetailsDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<MixingBatchDetailsDto>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<MixingBatchDetailsDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MixingBatchDetailsDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<MixingBatchDetailsDto>(<any>null);
    }

    inventoryCheck(batch: MixingBatchCreateDto) : Observable<MixingInventoryCheckDto[]> {
        let url_ = this.baseUrl + "/mixing/inventory-check";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(batch);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processInventoryCheck(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processInventoryCheck(<any>response_);
                } catch (e) {
                    return <Observable<MixingInventoryCheckDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<MixingInventoryCheckDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processInventoryCheck(response: HttpResponseBase): Observable<MixingInventoryCheckDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(MixingInventoryCheckDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<MixingInventoryCheckDto[]>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class OrdersClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:5000";
    }

    search(from: Date | null | undefined, to: Date | null | undefined, clientName: string | null | undefined, recipeName: string | null | undefined, offset: number | undefined, count: number | undefined) : Observable<LazyLoadingResponseOfOrderDto> {
        let url_ = this.baseUrl + "/orders?";
        if (from !== undefined && from !== null)
            url_ += "From=" + encodeURIComponent(from ? "" + from.toISOString() : "") + "&";
        if (to !== undefined && to !== null)
            url_ += "To=" + encodeURIComponent(to ? "" + to.toISOString() : "") + "&";
        if (clientName !== undefined && clientName !== null)
            url_ += "ClientName=" + encodeURIComponent("" + clientName) + "&";
        if (recipeName !== undefined && recipeName !== null)
            url_ += "RecipeName=" + encodeURIComponent("" + recipeName) + "&";
        if (offset === null)
            throw new Error("The parameter 'offset' cannot be null.");
        else if (offset !== undefined)
            url_ += "Offset=" + encodeURIComponent("" + offset) + "&";
        if (count === null)
            throw new Error("The parameter 'count' cannot be null.");
        else if (count !== undefined)
            url_ += "Count=" + encodeURIComponent("" + count) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSearch(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSearch(<any>response_);
                } catch (e) {
                    return <Observable<LazyLoadingResponseOfOrderDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<LazyLoadingResponseOfOrderDto>><any>_observableThrow(response_);
        }));
    }

    protected processSearch(response: HttpResponseBase): Observable<LazyLoadingResponseOfOrderDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = LazyLoadingResponseOfOrderDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<LazyLoadingResponseOfOrderDto>(<any>null);
    }

    placeOrder(order: OrderCreateDto) : Observable<OrderDto> {
        let url_ = this.baseUrl + "/orders";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(order);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPlaceOrder(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPlaceOrder(<any>response_);
                } catch (e) {
                    return <Observable<OrderDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<OrderDto>><any>_observableThrow(response_);
        }));
    }

    protected processPlaceOrder(response: HttpResponseBase): Observable<OrderDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OrderDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<OrderDto>(<any>null);
    }

    searchForMixing(from: Date | null | undefined, to: Date | null | undefined, clientName: string | null | undefined, recipeName: string | null | undefined, offset: number | undefined, count: number | undefined) : Observable<LazyLoadingResponseOfOrderPartDto> {
        let url_ = this.baseUrl + "/orders/incomplete?";
        if (from !== undefined && from !== null)
            url_ += "From=" + encodeURIComponent(from ? "" + from.toISOString() : "") + "&";
        if (to !== undefined && to !== null)
            url_ += "To=" + encodeURIComponent(to ? "" + to.toISOString() : "") + "&";
        if (clientName !== undefined && clientName !== null)
            url_ += "ClientName=" + encodeURIComponent("" + clientName) + "&";
        if (recipeName !== undefined && recipeName !== null)
            url_ += "RecipeName=" + encodeURIComponent("" + recipeName) + "&";
        if (offset === null)
            throw new Error("The parameter 'offset' cannot be null.");
        else if (offset !== undefined)
            url_ += "Offset=" + encodeURIComponent("" + offset) + "&";
        if (count === null)
            throw new Error("The parameter 'count' cannot be null.");
        else if (count !== undefined)
            url_ += "Count=" + encodeURIComponent("" + count) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSearchForMixing(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSearchForMixing(<any>response_);
                } catch (e) {
                    return <Observable<LazyLoadingResponseOfOrderPartDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<LazyLoadingResponseOfOrderPartDto>><any>_observableThrow(response_);
        }));
    }

    protected processSearchForMixing(response: HttpResponseBase): Observable<LazyLoadingResponseOfOrderPartDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = LazyLoadingResponseOfOrderPartDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<LazyLoadingResponseOfOrderPartDto>(<any>null);
    }

    searchForDelivery(orderSearchParams: OrderForDeliverySearchParamsDto | null | undefined, offset: number | undefined, count: number | undefined) : Observable<LazyLoadingResponseOfOrderForDeliveryDto> {
        let url_ = this.baseUrl + "/orders/for-delivery?";
        if (orderSearchParams !== undefined && orderSearchParams !== null)
            url_ += "orderSearchParams=" + encodeURIComponent("" + orderSearchParams) + "&";
        if (offset === null)
            throw new Error("The parameter 'offset' cannot be null.");
        else if (offset !== undefined)
            url_ += "Offset=" + encodeURIComponent("" + offset) + "&";
        if (count === null)
            throw new Error("The parameter 'count' cannot be null.");
        else if (count !== undefined)
            url_ += "Count=" + encodeURIComponent("" + count) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSearchForDelivery(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSearchForDelivery(<any>response_);
                } catch (e) {
                    return <Observable<LazyLoadingResponseOfOrderForDeliveryDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<LazyLoadingResponseOfOrderForDeliveryDto>><any>_observableThrow(response_);
        }));
    }

    protected processSearchForDelivery(response: HttpResponseBase): Observable<LazyLoadingResponseOfOrderForDeliveryDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = LazyLoadingResponseOfOrderForDeliveryDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<LazyLoadingResponseOfOrderForDeliveryDto>(<any>null);
    }

    getDetails(id: number) : Observable<OrderDetailsDto> {
        let url_ = this.baseUrl + "/orders/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDetails(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDetails(<any>response_);
                } catch (e) {
                    return <Observable<OrderDetailsDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<OrderDetailsDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetDetails(response: HttpResponseBase): Observable<OrderDetailsDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OrderDetailsDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<OrderDetailsDto>(<any>null);
    }

    cancelOrder(id: number) : Observable<OrderDto> {
        let url_ = this.baseUrl + "/orders/{id}/cancel";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCancelOrder(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCancelOrder(<any>response_);
                } catch (e) {
                    return <Observable<OrderDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<OrderDto>><any>_observableThrow(response_);
        }));
    }

    protected processCancelOrder(response: HttpResponseBase): Observable<OrderDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OrderDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<OrderDto>(<any>null);
    }

    cancelItems(cancellationDto: OrderItemCancellationDto) : Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/orders/cancel-item";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(cancellationDto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCancelItems(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCancelItems(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processCancelItems(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse | null>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class RecipeClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:5000";
    }

    list(offset: number | undefined, count: number | undefined, search: string | null | undefined) : Observable<LazyLoadingResponseOfRecipeDto> {
        let url_ = this.baseUrl + "/recipes?";
        if (offset === null)
            throw new Error("The parameter 'offset' cannot be null.");
        else if (offset !== undefined)
            url_ += "Offset=" + encodeURIComponent("" + offset) + "&";
        if (count === null)
            throw new Error("The parameter 'count' cannot be null.");
        else if (count !== undefined)
            url_ += "Count=" + encodeURIComponent("" + count) + "&";
        if (search !== undefined && search !== null)
            url_ += "search=" + encodeURIComponent("" + search) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processList(<any>response_);
                } catch (e) {
                    return <Observable<LazyLoadingResponseOfRecipeDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<LazyLoadingResponseOfRecipeDto>><any>_observableThrow(response_);
        }));
    }

    protected processList(response: HttpResponseBase): Observable<LazyLoadingResponseOfRecipeDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = LazyLoadingResponseOfRecipeDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<LazyLoadingResponseOfRecipeDto>(<any>null);
    }

    post(recipeDto: RecipeCreateDto) : Observable<RecipeDetailsDto> {
        let url_ = this.baseUrl + "/recipes";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(recipeDto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPost(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPost(<any>response_);
                } catch (e) {
                    return <Observable<RecipeDetailsDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<RecipeDetailsDto>><any>_observableThrow(response_);
        }));
    }

    protected processPost(response: HttpResponseBase): Observable<RecipeDetailsDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RecipeDetailsDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RecipeDetailsDto>(<any>null);
    }

    get(id: number) : Observable<RecipeDetailsDto> {
        let url_ = this.baseUrl + "/recipes/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<RecipeDetailsDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<RecipeDetailsDto>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<RecipeDetailsDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RecipeDetailsDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RecipeDetailsDto>(<any>null);
    }

    put(id: number, recipeDto: RecipeCreateDto) : Observable<RecipeDetailsDto> {
        let url_ = this.baseUrl + "/recipes/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(recipeDto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPut(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPut(<any>response_);
                } catch (e) {
                    return <Observable<RecipeDetailsDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<RecipeDetailsDto>><any>_observableThrow(response_);
        }));
    }

    protected processPut(response: HttpResponseBase): Observable<RecipeDetailsDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RecipeDetailsDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RecipeDetailsDto>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class SecurityClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:5000";
    }

    create(userDto: UserCreateDto) : Observable<UserSecurityInfoDto> {
        let url_ = this.baseUrl + "/security";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(userDto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<UserSecurityInfoDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<UserSecurityInfoDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<UserSecurityInfoDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserSecurityInfoDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserSecurityInfoDto>(<any>null);
    }

    list(search: string | null | undefined, offset: number | undefined, count: number | undefined) : Observable<LazyLoadingResponseOfUserShallowDto> {
        let url_ = this.baseUrl + "/security?";
        if (search !== undefined && search !== null)
            url_ += "search=" + encodeURIComponent("" + search) + "&";
        if (offset === null)
            throw new Error("The parameter 'offset' cannot be null.");
        else if (offset !== undefined)
            url_ += "Offset=" + encodeURIComponent("" + offset) + "&";
        if (count === null)
            throw new Error("The parameter 'count' cannot be null.");
        else if (count !== undefined)
            url_ += "Count=" + encodeURIComponent("" + count) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processList(<any>response_);
                } catch (e) {
                    return <Observable<LazyLoadingResponseOfUserShallowDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<LazyLoadingResponseOfUserShallowDto>><any>_observableThrow(response_);
        }));
    }

    protected processList(response: HttpResponseBase): Observable<LazyLoadingResponseOfUserShallowDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = LazyLoadingResponseOfUserShallowDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<LazyLoadingResponseOfUserShallowDto>(<any>null);
    }

    update(userDto: UserCreateDto, id: number) : Observable<UserSecurityInfoDto> {
        let url_ = this.baseUrl + "/security/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(userDto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<UserSecurityInfoDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<UserSecurityInfoDto>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<UserSecurityInfoDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserSecurityInfoDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserSecurityInfoDto>(<any>null);
    }

    getUserInfo(id: number) : Observable<UserSecurityInfoDto> {
        let url_ = this.baseUrl + "/security/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUserInfo(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUserInfo(<any>response_);
                } catch (e) {
                    return <Observable<UserSecurityInfoDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<UserSecurityInfoDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetUserInfo(response: HttpResponseBase): Observable<UserSecurityInfoDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserSecurityInfoDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserSecurityInfoDto>(<any>null);
    }

    overridePassword(id: number, password: string) : Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/security/{id}/password";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(password);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processOverridePassword(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processOverridePassword(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processOverridePassword(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse | null>(<any>null);
    }
}

export class LoginDto implements ILoginDto {
    name?: string | undefined;
    password?: string | undefined;

    constructor(data?: ILoginDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): LoginDto {
        data = typeof data === 'object' ? data : {};
        let result = new LoginDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["password"] = this.password;
        return data; 
    }
}

export interface ILoginDto {
    name?: string | undefined;
    password?: string | undefined;
}

export class LazyLoadingResponseOfClient implements ILazyLoadingResponseOfClient {
    offset!: number;
    count!: number;
    nextOffset!: number;
    hasMore!: boolean;
    content?: Client[] | undefined;

    constructor(data?: ILazyLoadingResponseOfClient) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.offset = _data["offset"];
            this.count = _data["count"];
            this.nextOffset = _data["nextOffset"];
            this.hasMore = _data["hasMore"];
            if (Array.isArray(_data["content"])) {
                this.content = [] as any;
                for (let item of _data["content"])
                    this.content!.push(Client.fromJS(item));
            }
        }
    }

    static fromJS(data: any): LazyLoadingResponseOfClient {
        data = typeof data === 'object' ? data : {};
        let result = new LazyLoadingResponseOfClient();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["offset"] = this.offset;
        data["count"] = this.count;
        data["nextOffset"] = this.nextOffset;
        data["hasMore"] = this.hasMore;
        if (Array.isArray(this.content)) {
            data["content"] = [];
            for (let item of this.content)
                data["content"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ILazyLoadingResponseOfClient {
    offset: number;
    count: number;
    nextOffset: number;
    hasMore: boolean;
    content?: Client[] | undefined;
}

export class Client implements IClient {
    id!: number;
    name!: string;
    address!: Address;
    email!: string;
    phone!: string;

    constructor(data?: IClient) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.address = new Address();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.address = _data["address"] ? Address.fromJS(_data["address"]) : new Address();
            this.email = _data["email"];
            this.phone = _data["phone"];
        }
    }

    static fromJS(data: any): Client {
        data = typeof data === 'object' ? data : {};
        let result = new Client();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["address"] = this.address ? this.address.toJSON() : <any>undefined;
        data["email"] = this.email;
        data["phone"] = this.phone;
        return data; 
    }
}

export interface IClient {
    id: number;
    name: string;
    address: Address;
    email: string;
    phone: string;
}

export class Address implements IAddress {
    country!: string;
    zip!: string;
    region!: string;
    city!: string;
    addressLine!: string;

    constructor(data?: IAddress) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.country = _data["country"];
            this.zip = _data["zip"];
            this.region = _data["region"];
            this.city = _data["city"];
            this.addressLine = _data["addressLine"];
        }
    }

    static fromJS(data: any): Address {
        data = typeof data === 'object' ? data : {};
        let result = new Address();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["country"] = this.country;
        data["zip"] = this.zip;
        data["region"] = this.region;
        data["city"] = this.city;
        data["addressLine"] = this.addressLine;
        return data; 
    }
}

export interface IAddress {
    country: string;
    zip: string;
    region: string;
    city: string;
    addressLine: string;
}

export class ClientDto extends Client implements IClientDto {

    constructor(data?: IClientDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): ClientDto {
        data = typeof data === 'object' ? data : {};
        let result = new ClientDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IClientDto extends IClient {
}

export class DeliveryDetailsDto implements IDeliveryDetailsDto {
    id!: number;
    name?: string | undefined;
    deliveryDate!: Date;
    orders?: OrderDetails[] | undefined;
    completed!: boolean;

    constructor(data?: IDeliveryDetailsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.deliveryDate = _data["deliveryDate"] ? new Date(_data["deliveryDate"].toString()) : <any>undefined;
            if (Array.isArray(_data["orders"])) {
                this.orders = [] as any;
                for (let item of _data["orders"])
                    this.orders!.push(OrderDetails.fromJS(item));
            }
            this.completed = _data["completed"];
        }
    }

    static fromJS(data: any): DeliveryDetailsDto {
        data = typeof data === 'object' ? data : {};
        let result = new DeliveryDetailsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["deliveryDate"] = this.deliveryDate ? this.deliveryDate.toISOString() : <any>undefined;
        if (Array.isArray(this.orders)) {
            data["orders"] = [];
            for (let item of this.orders)
                data["orders"].push(item.toJSON());
        }
        data["completed"] = this.completed;
        return data; 
    }
}

export interface IDeliveryDetailsDto {
    id: number;
    name?: string | undefined;
    deliveryDate: Date;
    orders?: OrderDetails[] | undefined;
    completed: boolean;
}

export class OrderDetails implements IOrderDetails {
    id!: number;
    items!: OrderDetailsItem[];
    client!: Client;
    orderCreated!: Date;
    requestedDate!: Date;
    orderState!: OrderState;
    associatedBatches!: AssociatedBatch[];

    constructor(data?: IOrderDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.items = [];
            this.client = new Client();
            this.associatedBatches = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(OrderDetailsItem.fromJS(item));
            }
            this.client = _data["client"] ? Client.fromJS(_data["client"]) : new Client();
            this.orderCreated = _data["orderCreated"] ? new Date(_data["orderCreated"].toString()) : <any>undefined;
            this.requestedDate = _data["requestedDate"] ? new Date(_data["requestedDate"].toString()) : <any>undefined;
            this.orderState = _data["orderState"];
            if (Array.isArray(_data["associatedBatches"])) {
                this.associatedBatches = [] as any;
                for (let item of _data["associatedBatches"])
                    this.associatedBatches!.push(AssociatedBatch.fromJS(item));
            }
        }
    }

    static fromJS(data: any): OrderDetails {
        data = typeof data === 'object' ? data : {};
        let result = new OrderDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["client"] = this.client ? this.client.toJSON() : <any>undefined;
        data["orderCreated"] = this.orderCreated ? this.orderCreated.toISOString() : <any>undefined;
        data["requestedDate"] = this.requestedDate ? this.requestedDate.toISOString() : <any>undefined;
        data["orderState"] = this.orderState;
        if (Array.isArray(this.associatedBatches)) {
            data["associatedBatches"] = [];
            for (let item of this.associatedBatches)
                data["associatedBatches"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IOrderDetails {
    id: number;
    items: OrderDetailsItem[];
    client: Client;
    orderCreated: Date;
    requestedDate: Date;
    orderState: OrderState;
    associatedBatches: AssociatedBatch[];
}

export class OrderDetailsItem implements IOrderDetailsItem {
    recipe!: Recipe;
    amount!: number;
    selectedMixingAmount!: number;
    mixedAmount!: number;
    cancelledAmount!: number;
    pendingAmount!: number;

    constructor(data?: IOrderDetailsItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.recipe = new Recipe();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.recipe = _data["recipe"] ? Recipe.fromJS(_data["recipe"]) : new Recipe();
            this.amount = _data["amount"];
            this.selectedMixingAmount = _data["selectedMixingAmount"];
            this.mixedAmount = _data["mixedAmount"];
            this.cancelledAmount = _data["cancelledAmount"];
            this.pendingAmount = _data["pendingAmount"];
        }
    }

    static fromJS(data: any): OrderDetailsItem {
        data = typeof data === 'object' ? data : {};
        let result = new OrderDetailsItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["recipe"] = this.recipe ? this.recipe.toJSON() : <any>undefined;
        data["amount"] = this.amount;
        data["selectedMixingAmount"] = this.selectedMixingAmount;
        data["mixedAmount"] = this.mixedAmount;
        data["cancelledAmount"] = this.cancelledAmount;
        data["pendingAmount"] = this.pendingAmount;
        return data; 
    }
}

export interface IOrderDetailsItem {
    recipe: Recipe;
    amount: number;
    selectedMixingAmount: number;
    mixedAmount: number;
    cancelledAmount: number;
    pendingAmount: number;
}

export class Recipe implements IRecipe {
    id!: number;
    name!: string;
    canBeOrdered!: boolean;
    pricePerUnit!: number;

    constructor(data?: IRecipe) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.canBeOrdered = _data["canBeOrdered"];
            this.pricePerUnit = _data["pricePerUnit"];
        }
    }

    static fromJS(data: any): Recipe {
        data = typeof data === 'object' ? data : {};
        let result = new Recipe();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["canBeOrdered"] = this.canBeOrdered;
        data["pricePerUnit"] = this.pricePerUnit;
        return data; 
    }
}

export interface IRecipe {
    id: number;
    name: string;
    canBeOrdered: boolean;
    pricePerUnit: number;
}

export enum OrderState {
    Cancelled = 0,
    Pending = 1,
    Active = 2,
    ReadyForDelivery = 3,
    Delivered = 4,
}

export class AssociatedBatch implements IAssociatedBatch {
    mixingBatchId!: number;
    batchCompleted!: boolean;
    name!: string;
    created!: Date;
    items!: MixingBatchItem[];

    constructor(data?: IAssociatedBatch) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.items = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.mixingBatchId = _data["mixingBatchId"];
            this.batchCompleted = _data["batchCompleted"];
            this.name = _data["name"];
            this.created = _data["created"] ? new Date(_data["created"].toString()) : <any>undefined;
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(MixingBatchItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AssociatedBatch {
        data = typeof data === 'object' ? data : {};
        let result = new AssociatedBatch();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["mixingBatchId"] = this.mixingBatchId;
        data["batchCompleted"] = this.batchCompleted;
        data["name"] = this.name;
        data["created"] = this.created ? this.created.toISOString() : <any>undefined;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IAssociatedBatch {
    mixingBatchId: number;
    batchCompleted: boolean;
    name: string;
    created: Date;
    items: MixingBatchItem[];
}

export class MixingBatchItem implements IMixingBatchItem {
    recipe!: Recipe;
    amount!: number;
    completedAmount!: number;

    constructor(data?: IMixingBatchItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.recipe = new Recipe();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.recipe = _data["recipe"] ? Recipe.fromJS(_data["recipe"]) : new Recipe();
            this.amount = _data["amount"];
            this.completedAmount = _data["completedAmount"];
        }
    }

    static fromJS(data: any): MixingBatchItem {
        data = typeof data === 'object' ? data : {};
        let result = new MixingBatchItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["recipe"] = this.recipe ? this.recipe.toJSON() : <any>undefined;
        data["amount"] = this.amount;
        data["completedAmount"] = this.completedAmount;
        return data; 
    }
}

export interface IMixingBatchItem {
    recipe: Recipe;
    amount: number;
    completedAmount: number;
}

export class DeliveryEditDto implements IDeliveryEditDto {
    id?: number | undefined;
    name?: string | undefined;
    deliveryDate!: Date;
    orderIds?: number[] | undefined;
    completed!: boolean;

    constructor(data?: IDeliveryEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.deliveryDate = _data["deliveryDate"] ? new Date(_data["deliveryDate"].toString()) : <any>undefined;
            if (Array.isArray(_data["orderIds"])) {
                this.orderIds = [] as any;
                for (let item of _data["orderIds"])
                    this.orderIds!.push(item);
            }
            this.completed = _data["completed"];
        }
    }

    static fromJS(data: any): DeliveryEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new DeliveryEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["deliveryDate"] = this.deliveryDate ? this.deliveryDate.toISOString() : <any>undefined;
        if (Array.isArray(this.orderIds)) {
            data["orderIds"] = [];
            for (let item of this.orderIds)
                data["orderIds"].push(item);
        }
        data["completed"] = this.completed;
        return data; 
    }
}

export interface IDeliveryEditDto {
    id?: number | undefined;
    name?: string | undefined;
    deliveryDate: Date;
    orderIds?: number[] | undefined;
    completed: boolean;
}

export class LazyLoadingResponseOfDeliveryShallow implements ILazyLoadingResponseOfDeliveryShallow {
    offset!: number;
    count!: number;
    nextOffset!: number;
    hasMore!: boolean;
    content?: DeliveryShallow[] | undefined;

    constructor(data?: ILazyLoadingResponseOfDeliveryShallow) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.offset = _data["offset"];
            this.count = _data["count"];
            this.nextOffset = _data["nextOffset"];
            this.hasMore = _data["hasMore"];
            if (Array.isArray(_data["content"])) {
                this.content = [] as any;
                for (let item of _data["content"])
                    this.content!.push(DeliveryShallow.fromJS(item));
            }
        }
    }

    static fromJS(data: any): LazyLoadingResponseOfDeliveryShallow {
        data = typeof data === 'object' ? data : {};
        let result = new LazyLoadingResponseOfDeliveryShallow();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["offset"] = this.offset;
        data["count"] = this.count;
        data["nextOffset"] = this.nextOffset;
        data["hasMore"] = this.hasMore;
        if (Array.isArray(this.content)) {
            data["content"] = [];
            for (let item of this.content)
                data["content"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ILazyLoadingResponseOfDeliveryShallow {
    offset: number;
    count: number;
    nextOffset: number;
    hasMore: boolean;
    content?: DeliveryShallow[] | undefined;
}

export class DeliveryShallow implements IDeliveryShallow {
    id!: number;
    name!: string;
    deliveryDate!: Date;
    completed!: boolean;
    clientCount!: number;
    orderCount!: number;
    recipeCount!: number;
    totalAmount!: number;

    constructor(data?: IDeliveryShallow) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.deliveryDate = _data["deliveryDate"] ? new Date(_data["deliveryDate"].toString()) : <any>undefined;
            this.completed = _data["completed"];
            this.clientCount = _data["clientCount"];
            this.orderCount = _data["orderCount"];
            this.recipeCount = _data["recipeCount"];
            this.totalAmount = _data["totalAmount"];
        }
    }

    static fromJS(data: any): DeliveryShallow {
        data = typeof data === 'object' ? data : {};
        let result = new DeliveryShallow();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["deliveryDate"] = this.deliveryDate ? this.deliveryDate.toISOString() : <any>undefined;
        data["completed"] = this.completed;
        data["clientCount"] = this.clientCount;
        data["orderCount"] = this.orderCount;
        data["recipeCount"] = this.recipeCount;
        data["totalAmount"] = this.totalAmount;
        return data; 
    }
}

export interface IDeliveryShallow {
    id: number;
    name: string;
    deliveryDate: Date;
    completed: boolean;
    clientCount: number;
    orderCount: number;
    recipeCount: number;
    totalAmount: number;
}

export class DeliverySearchParamsDto implements IDeliverySearchParamsDto {

    constructor(data?: IDeliverySearchParamsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): DeliverySearchParamsDto {
        data = typeof data === 'object' ? data : {};
        let result = new DeliverySearchParamsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IDeliverySearchParamsDto {
}

export class LazyLoadingResponseOfIngredient implements ILazyLoadingResponseOfIngredient {
    offset!: number;
    count!: number;
    nextOffset!: number;
    hasMore!: boolean;
    content?: Ingredient[] | undefined;

    constructor(data?: ILazyLoadingResponseOfIngredient) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.offset = _data["offset"];
            this.count = _data["count"];
            this.nextOffset = _data["nextOffset"];
            this.hasMore = _data["hasMore"];
            if (Array.isArray(_data["content"])) {
                this.content = [] as any;
                for (let item of _data["content"])
                    this.content!.push(Ingredient.fromJS(item));
            }
        }
    }

    static fromJS(data: any): LazyLoadingResponseOfIngredient {
        data = typeof data === 'object' ? data : {};
        let result = new LazyLoadingResponseOfIngredient();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["offset"] = this.offset;
        data["count"] = this.count;
        data["nextOffset"] = this.nextOffset;
        data["hasMore"] = this.hasMore;
        if (Array.isArray(this.content)) {
            data["content"] = [];
            for (let item of this.content)
                data["content"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ILazyLoadingResponseOfIngredient {
    offset: number;
    count: number;
    nextOffset: number;
    hasMore: boolean;
    content?: Ingredient[] | undefined;
}

export class Ingredient implements IIngredient {
    id!: number;
    name!: string;
    amountOnHand!: number;
    measurementUnit!: string;
    quantityPerPackage!: number;
    warningThreshold!: number;

    constructor(data?: IIngredient) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.amountOnHand = _data["amountOnHand"];
            this.measurementUnit = _data["measurementUnit"];
            this.quantityPerPackage = _data["quantityPerPackage"];
            this.warningThreshold = _data["warningThreshold"];
        }
    }

    static fromJS(data: any): Ingredient {
        data = typeof data === 'object' ? data : {};
        let result = new Ingredient();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["amountOnHand"] = this.amountOnHand;
        data["measurementUnit"] = this.measurementUnit;
        data["quantityPerPackage"] = this.quantityPerPackage;
        data["warningThreshold"] = this.warningThreshold;
        return data; 
    }
}

export interface IIngredient {
    id: number;
    name: string;
    amountOnHand: number;
    measurementUnit: string;
    quantityPerPackage: number;
    warningThreshold: number;
}

export class IngredientDto implements IIngredientDto {
    id!: number;
    name?: string | undefined;
    amountOnHand!: number;
    measurementUnit?: string | undefined;
    quantityPerPackage!: number;
    warningThreshold!: number;

    constructor(data?: IIngredientDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.amountOnHand = _data["amountOnHand"];
            this.measurementUnit = _data["measurementUnit"];
            this.quantityPerPackage = _data["quantityPerPackage"];
            this.warningThreshold = _data["warningThreshold"];
        }
    }

    static fromJS(data: any): IngredientDto {
        data = typeof data === 'object' ? data : {};
        let result = new IngredientDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["amountOnHand"] = this.amountOnHand;
        data["measurementUnit"] = this.measurementUnit;
        data["quantityPerPackage"] = this.quantityPerPackage;
        data["warningThreshold"] = this.warningThreshold;
        return data; 
    }
}

export interface IIngredientDto {
    id: number;
    name?: string | undefined;
    amountOnHand: number;
    measurementUnit?: string | undefined;
    quantityPerPackage: number;
    warningThreshold: number;
}

export class IngredientCreateDto implements IIngredientCreateDto {
    id!: number;
    name?: string | undefined;
    measurementUnit?: string | undefined;
    quantityPerPackage!: number;
    warningThreshold!: number;

    constructor(data?: IIngredientCreateDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.measurementUnit = _data["measurementUnit"];
            this.quantityPerPackage = _data["quantityPerPackage"];
            this.warningThreshold = _data["warningThreshold"];
        }
    }

    static fromJS(data: any): IngredientCreateDto {
        data = typeof data === 'object' ? data : {};
        let result = new IngredientCreateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["measurementUnit"] = this.measurementUnit;
        data["quantityPerPackage"] = this.quantityPerPackage;
        data["warningThreshold"] = this.warningThreshold;
        return data; 
    }
}

export interface IIngredientCreateDto {
    id: number;
    name?: string | undefined;
    measurementUnit?: string | undefined;
    quantityPerPackage: number;
    warningThreshold: number;
}

export class LazyLoadingResponseOfInventoryStatusDto implements ILazyLoadingResponseOfInventoryStatusDto {
    offset!: number;
    count!: number;
    nextOffset!: number;
    hasMore!: boolean;
    content?: InventoryStatusDto[] | undefined;

    constructor(data?: ILazyLoadingResponseOfInventoryStatusDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.offset = _data["offset"];
            this.count = _data["count"];
            this.nextOffset = _data["nextOffset"];
            this.hasMore = _data["hasMore"];
            if (Array.isArray(_data["content"])) {
                this.content = [] as any;
                for (let item of _data["content"])
                    this.content!.push(InventoryStatusDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): LazyLoadingResponseOfInventoryStatusDto {
        data = typeof data === 'object' ? data : {};
        let result = new LazyLoadingResponseOfInventoryStatusDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["offset"] = this.offset;
        data["count"] = this.count;
        data["nextOffset"] = this.nextOffset;
        data["hasMore"] = this.hasMore;
        if (Array.isArray(this.content)) {
            data["content"] = [];
            for (let item of this.content)
                data["content"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ILazyLoadingResponseOfInventoryStatusDto {
    offset: number;
    count: number;
    nextOffset: number;
    hasMore: boolean;
    content?: InventoryStatusDto[] | undefined;
}

export class InventoryStatusDto implements IInventoryStatusDto {
    id!: number;
    name?: string | undefined;
    amountOnHand!: number;
    measurementUnit?: string | undefined;
    quantityPerPackage!: number;
    warningThreshold!: number;
    amountRequired!: number;

    constructor(data?: IInventoryStatusDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.amountOnHand = _data["amountOnHand"];
            this.measurementUnit = _data["measurementUnit"];
            this.quantityPerPackage = _data["quantityPerPackage"];
            this.warningThreshold = _data["warningThreshold"];
            this.amountRequired = _data["amountRequired"];
        }
    }

    static fromJS(data: any): InventoryStatusDto {
        data = typeof data === 'object' ? data : {};
        let result = new InventoryStatusDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["amountOnHand"] = this.amountOnHand;
        data["measurementUnit"] = this.measurementUnit;
        data["quantityPerPackage"] = this.quantityPerPackage;
        data["warningThreshold"] = this.warningThreshold;
        data["amountRequired"] = this.amountRequired;
        return data; 
    }
}

export interface IInventoryStatusDto {
    id: number;
    name?: string | undefined;
    amountOnHand: number;
    measurementUnit?: string | undefined;
    quantityPerPackage: number;
    warningThreshold: number;
    amountRequired: number;
}

export class InventorySearchParamsDto implements IInventorySearchParamsDto {

    constructor(data?: IInventorySearchParamsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): InventorySearchParamsDto {
        data = typeof data === 'object' ? data : {};
        let result = new InventorySearchParamsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IInventorySearchParamsDto {
}

export enum InventoryWarningDto {
    Ok = 0,
    ThresholdReached = 1,
    NotEnoughForPendingOrders = 2,
}

export class MixingBatchCreateDto implements IMixingBatchCreateDto {
    id?: number | undefined;
    name?: string | undefined;
    members?: MixingBatchCreateMemberDto[] | undefined;

    constructor(data?: IMixingBatchCreateDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            if (Array.isArray(_data["members"])) {
                this.members = [] as any;
                for (let item of _data["members"])
                    this.members!.push(MixingBatchCreateMemberDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MixingBatchCreateDto {
        data = typeof data === 'object' ? data : {};
        let result = new MixingBatchCreateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        if (Array.isArray(this.members)) {
            data["members"] = [];
            for (let item of this.members)
                data["members"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IMixingBatchCreateDto {
    id?: number | undefined;
    name?: string | undefined;
    members?: MixingBatchCreateMemberDto[] | undefined;
}

export class MixingBatchCreateMemberDto implements IMixingBatchCreateMemberDto {
    orderId!: number;
    items?: MixingBatchCreateItemDto[] | undefined;

    constructor(data?: IMixingBatchCreateMemberDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.orderId = _data["orderId"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(MixingBatchCreateItemDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MixingBatchCreateMemberDto {
        data = typeof data === 'object' ? data : {};
        let result = new MixingBatchCreateMemberDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orderId"] = this.orderId;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IMixingBatchCreateMemberDto {
    orderId: number;
    items?: MixingBatchCreateItemDto[] | undefined;
}

export class MixingBatchCreateItemDto implements IMixingBatchCreateItemDto {
    recipeId!: number;
    amount!: number;

    constructor(data?: IMixingBatchCreateItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.recipeId = _data["recipeId"];
            this.amount = _data["amount"];
        }
    }

    static fromJS(data: any): MixingBatchCreateItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new MixingBatchCreateItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["recipeId"] = this.recipeId;
        data["amount"] = this.amount;
        return data; 
    }
}

export interface IMixingBatchCreateItemDto {
    recipeId: number;
    amount: number;
}

export class MixingBatchDetailsDto implements IMixingBatchDetailsDto {
    id!: number;
    name?: string | undefined;
    created!: Date;
    members?: MixingBatchMemberDto[] | undefined;

    constructor(data?: IMixingBatchDetailsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.created = _data["created"] ? new Date(_data["created"].toString()) : <any>undefined;
            if (Array.isArray(_data["members"])) {
                this.members = [] as any;
                for (let item of _data["members"])
                    this.members!.push(MixingBatchMemberDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MixingBatchDetailsDto {
        data = typeof data === 'object' ? data : {};
        let result = new MixingBatchDetailsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["created"] = this.created ? this.created.toISOString() : <any>undefined;
        if (Array.isArray(this.members)) {
            data["members"] = [];
            for (let item of this.members)
                data["members"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IMixingBatchDetailsDto {
    id: number;
    name?: string | undefined;
    created: Date;
    members?: MixingBatchMemberDto[] | undefined;
}

export class MixingBatchMemberDto implements IMixingBatchMemberDto {
    order?: OrderDto | undefined;
    items?: MixingBatchItemDto[] | undefined;

    constructor(data?: IMixingBatchMemberDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.order = _data["order"] ? OrderDto.fromJS(_data["order"]) : <any>undefined;
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(MixingBatchItemDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MixingBatchMemberDto {
        data = typeof data === 'object' ? data : {};
        let result = new MixingBatchMemberDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["order"] = this.order ? this.order.toJSON() : <any>undefined;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IMixingBatchMemberDto {
    order?: OrderDto | undefined;
    items?: MixingBatchItemDto[] | undefined;
}

export class Order implements IOrder {
    id!: number;
    items!: OrderItem[];
    client!: Client;
    orderCreated!: Date;
    requestedDate!: Date;
    orderState!: OrderState;

    constructor(data?: IOrder) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.items = [];
            this.client = new Client();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(OrderItem.fromJS(item));
            }
            this.client = _data["client"] ? Client.fromJS(_data["client"]) : new Client();
            this.orderCreated = _data["orderCreated"] ? new Date(_data["orderCreated"].toString()) : <any>undefined;
            this.requestedDate = _data["requestedDate"] ? new Date(_data["requestedDate"].toString()) : <any>undefined;
            this.orderState = _data["orderState"];
        }
    }

    static fromJS(data: any): Order {
        data = typeof data === 'object' ? data : {};
        let result = new Order();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["client"] = this.client ? this.client.toJSON() : <any>undefined;
        data["orderCreated"] = this.orderCreated ? this.orderCreated.toISOString() : <any>undefined;
        data["requestedDate"] = this.requestedDate ? this.requestedDate.toISOString() : <any>undefined;
        data["orderState"] = this.orderState;
        return data; 
    }
}

export interface IOrder {
    id: number;
    items: OrderItem[];
    client: Client;
    orderCreated: Date;
    requestedDate: Date;
    orderState: OrderState;
}

export class OrderDto extends Order implements IOrderDto {

    constructor(data?: IOrderDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): OrderDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrderDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IOrderDto extends IOrder {
}

export class OrderItem implements IOrderItem {
    recipe!: Recipe;
    amount!: number;

    constructor(data?: IOrderItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.recipe = new Recipe();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.recipe = _data["recipe"] ? Recipe.fromJS(_data["recipe"]) : new Recipe();
            this.amount = _data["amount"];
        }
    }

    static fromJS(data: any): OrderItem {
        data = typeof data === 'object' ? data : {};
        let result = new OrderItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["recipe"] = this.recipe ? this.recipe.toJSON() : <any>undefined;
        data["amount"] = this.amount;
        return data; 
    }
}

export interface IOrderItem {
    recipe: Recipe;
    amount: number;
}

export class MixingBatchItemDto implements IMixingBatchItemDto {
    recipe?: RecipeDto | undefined;
    amount!: number;
    completedAmount!: number;

    constructor(data?: IMixingBatchItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.recipe = _data["recipe"] ? RecipeDto.fromJS(_data["recipe"]) : <any>undefined;
            this.amount = _data["amount"];
            this.completedAmount = _data["completedAmount"];
        }
    }

    static fromJS(data: any): MixingBatchItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new MixingBatchItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["recipe"] = this.recipe ? this.recipe.toJSON() : <any>undefined;
        data["amount"] = this.amount;
        data["completedAmount"] = this.completedAmount;
        return data; 
    }
}

export interface IMixingBatchItemDto {
    recipe?: RecipeDto | undefined;
    amount: number;
    completedAmount: number;
}

export class RecipeDto implements IRecipeDto {
    id!: number;
    name?: string | undefined;
    canBeOrdered!: boolean;
    pricePerUnit!: number;

    constructor(data?: IRecipeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.canBeOrdered = _data["canBeOrdered"];
            this.pricePerUnit = _data["pricePerUnit"];
        }
    }

    static fromJS(data: any): RecipeDto {
        data = typeof data === 'object' ? data : {};
        let result = new RecipeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["canBeOrdered"] = this.canBeOrdered;
        data["pricePerUnit"] = this.pricePerUnit;
        return data; 
    }
}

export interface IRecipeDto {
    id: number;
    name?: string | undefined;
    canBeOrdered: boolean;
    pricePerUnit: number;
}

export class LazyLoadingResponseOfMixingBatchShallowDto implements ILazyLoadingResponseOfMixingBatchShallowDto {
    offset!: number;
    count!: number;
    nextOffset!: number;
    hasMore!: boolean;
    content?: MixingBatchShallowDto[] | undefined;

    constructor(data?: ILazyLoadingResponseOfMixingBatchShallowDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.offset = _data["offset"];
            this.count = _data["count"];
            this.nextOffset = _data["nextOffset"];
            this.hasMore = _data["hasMore"];
            if (Array.isArray(_data["content"])) {
                this.content = [] as any;
                for (let item of _data["content"])
                    this.content!.push(MixingBatchShallowDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): LazyLoadingResponseOfMixingBatchShallowDto {
        data = typeof data === 'object' ? data : {};
        let result = new LazyLoadingResponseOfMixingBatchShallowDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["offset"] = this.offset;
        data["count"] = this.count;
        data["nextOffset"] = this.nextOffset;
        data["hasMore"] = this.hasMore;
        if (Array.isArray(this.content)) {
            data["content"] = [];
            for (let item of this.content)
                data["content"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ILazyLoadingResponseOfMixingBatchShallowDto {
    offset: number;
    count: number;
    nextOffset: number;
    hasMore: boolean;
    content?: MixingBatchShallowDto[] | undefined;
}

export class MixingBatchShallowDto implements IMixingBatchShallowDto {
    id!: number;
    name?: string | undefined;
    created!: Date;
    orderCount!: number;
    recipeCount!: number;
    totalAmount!: number;
    totalCompletedAmount!: number;

    constructor(data?: IMixingBatchShallowDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.created = _data["created"] ? new Date(_data["created"].toString()) : <any>undefined;
            this.orderCount = _data["orderCount"];
            this.recipeCount = _data["recipeCount"];
            this.totalAmount = _data["totalAmount"];
            this.totalCompletedAmount = _data["totalCompletedAmount"];
        }
    }

    static fromJS(data: any): MixingBatchShallowDto {
        data = typeof data === 'object' ? data : {};
        let result = new MixingBatchShallowDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["created"] = this.created ? this.created.toISOString() : <any>undefined;
        data["orderCount"] = this.orderCount;
        data["recipeCount"] = this.recipeCount;
        data["totalAmount"] = this.totalAmount;
        data["totalCompletedAmount"] = this.totalCompletedAmount;
        return data; 
    }
}

export interface IMixingBatchShallowDto {
    id: number;
    name?: string | undefined;
    created: Date;
    orderCount: number;
    recipeCount: number;
    totalAmount: number;
    totalCompletedAmount: number;
}

export class MixingInventoryCheckDto implements IMixingInventoryCheckDto {
    ingredient?: IngredientDto | undefined;
    amountRequired!: number;

    constructor(data?: IMixingInventoryCheckDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ingredient = _data["ingredient"] ? IngredientDto.fromJS(_data["ingredient"]) : <any>undefined;
            this.amountRequired = _data["amountRequired"];
        }
    }

    static fromJS(data: any): MixingInventoryCheckDto {
        data = typeof data === 'object' ? data : {};
        let result = new MixingInventoryCheckDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ingredient"] = this.ingredient ? this.ingredient.toJSON() : <any>undefined;
        data["amountRequired"] = this.amountRequired;
        return data; 
    }
}

export interface IMixingInventoryCheckDto {
    ingredient?: IngredientDto | undefined;
    amountRequired: number;
}

export class LazyLoadingResponseOfOrderDto implements ILazyLoadingResponseOfOrderDto {
    offset!: number;
    count!: number;
    nextOffset!: number;
    hasMore!: boolean;
    content?: OrderDto[] | undefined;

    constructor(data?: ILazyLoadingResponseOfOrderDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.offset = _data["offset"];
            this.count = _data["count"];
            this.nextOffset = _data["nextOffset"];
            this.hasMore = _data["hasMore"];
            if (Array.isArray(_data["content"])) {
                this.content = [] as any;
                for (let item of _data["content"])
                    this.content!.push(OrderDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): LazyLoadingResponseOfOrderDto {
        data = typeof data === 'object' ? data : {};
        let result = new LazyLoadingResponseOfOrderDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["offset"] = this.offset;
        data["count"] = this.count;
        data["nextOffset"] = this.nextOffset;
        data["hasMore"] = this.hasMore;
        if (Array.isArray(this.content)) {
            data["content"] = [];
            for (let item of this.content)
                data["content"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ILazyLoadingResponseOfOrderDto {
    offset: number;
    count: number;
    nextOffset: number;
    hasMore: boolean;
    content?: OrderDto[] | undefined;
}

export class LazyLoadingResponseOfOrderPartDto implements ILazyLoadingResponseOfOrderPartDto {
    offset!: number;
    count!: number;
    nextOffset!: number;
    hasMore!: boolean;
    content?: OrderPartDto[] | undefined;

    constructor(data?: ILazyLoadingResponseOfOrderPartDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.offset = _data["offset"];
            this.count = _data["count"];
            this.nextOffset = _data["nextOffset"];
            this.hasMore = _data["hasMore"];
            if (Array.isArray(_data["content"])) {
                this.content = [] as any;
                for (let item of _data["content"])
                    this.content!.push(OrderPartDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): LazyLoadingResponseOfOrderPartDto {
        data = typeof data === 'object' ? data : {};
        let result = new LazyLoadingResponseOfOrderPartDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["offset"] = this.offset;
        data["count"] = this.count;
        data["nextOffset"] = this.nextOffset;
        data["hasMore"] = this.hasMore;
        if (Array.isArray(this.content)) {
            data["content"] = [];
            for (let item of this.content)
                data["content"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ILazyLoadingResponseOfOrderPartDto {
    offset: number;
    count: number;
    nextOffset: number;
    hasMore: boolean;
    content?: OrderPartDto[] | undefined;
}

export class OrderPartDto implements IOrderPartDto {
    id!: number;
    order?: Order | undefined;
    incompleteItems?: OrderItem[] | undefined;

    constructor(data?: IOrderPartDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.order = _data["order"] ? Order.fromJS(_data["order"]) : <any>undefined;
            if (Array.isArray(_data["incompleteItems"])) {
                this.incompleteItems = [] as any;
                for (let item of _data["incompleteItems"])
                    this.incompleteItems!.push(OrderItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): OrderPartDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrderPartDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["order"] = this.order ? this.order.toJSON() : <any>undefined;
        if (Array.isArray(this.incompleteItems)) {
            data["incompleteItems"] = [];
            for (let item of this.incompleteItems)
                data["incompleteItems"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IOrderPartDto {
    id: number;
    order?: Order | undefined;
    incompleteItems?: OrderItem[] | undefined;
}

export class LazyLoadingResponseOfOrderForDeliveryDto implements ILazyLoadingResponseOfOrderForDeliveryDto {
    offset!: number;
    count!: number;
    nextOffset!: number;
    hasMore!: boolean;
    content?: OrderForDeliveryDto[] | undefined;

    constructor(data?: ILazyLoadingResponseOfOrderForDeliveryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.offset = _data["offset"];
            this.count = _data["count"];
            this.nextOffset = _data["nextOffset"];
            this.hasMore = _data["hasMore"];
            if (Array.isArray(_data["content"])) {
                this.content = [] as any;
                for (let item of _data["content"])
                    this.content!.push(OrderForDeliveryDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): LazyLoadingResponseOfOrderForDeliveryDto {
        data = typeof data === 'object' ? data : {};
        let result = new LazyLoadingResponseOfOrderForDeliveryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["offset"] = this.offset;
        data["count"] = this.count;
        data["nextOffset"] = this.nextOffset;
        data["hasMore"] = this.hasMore;
        if (Array.isArray(this.content)) {
            data["content"] = [];
            for (let item of this.content)
                data["content"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ILazyLoadingResponseOfOrderForDeliveryDto {
    offset: number;
    count: number;
    nextOffset: number;
    hasMore: boolean;
    content?: OrderForDeliveryDto[] | undefined;
}

export class OrderForDeliveryDto implements IOrderForDeliveryDto {
    id!: number;
    items?: OrderItemForDeliveryDto[] | undefined;
    client?: Client | undefined;
    requestedDate!: Date;
    orderState!: OrderState;

    constructor(data?: IOrderForDeliveryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(OrderItemForDeliveryDto.fromJS(item));
            }
            this.client = _data["client"] ? Client.fromJS(_data["client"]) : <any>undefined;
            this.requestedDate = _data["requestedDate"] ? new Date(_data["requestedDate"].toString()) : <any>undefined;
            this.orderState = _data["orderState"];
        }
    }

    static fromJS(data: any): OrderForDeliveryDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrderForDeliveryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["client"] = this.client ? this.client.toJSON() : <any>undefined;
        data["requestedDate"] = this.requestedDate ? this.requestedDate.toISOString() : <any>undefined;
        data["orderState"] = this.orderState;
        return data; 
    }
}

export interface IOrderForDeliveryDto {
    id: number;
    items?: OrderItemForDeliveryDto[] | undefined;
    client?: Client | undefined;
    requestedDate: Date;
    orderState: OrderState;
}

export class OrderItemForDeliveryDto implements IOrderItemForDeliveryDto {
    recipe?: Recipe | undefined;
    amount!: number;
    pendingAmount!: number;
    mixedAmount!: number;
    cancelledAmount!: number;

    constructor(data?: IOrderItemForDeliveryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.recipe = _data["recipe"] ? Recipe.fromJS(_data["recipe"]) : <any>undefined;
            this.amount = _data["amount"];
            this.pendingAmount = _data["pendingAmount"];
            this.mixedAmount = _data["mixedAmount"];
            this.cancelledAmount = _data["cancelledAmount"];
        }
    }

    static fromJS(data: any): OrderItemForDeliveryDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrderItemForDeliveryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["recipe"] = this.recipe ? this.recipe.toJSON() : <any>undefined;
        data["amount"] = this.amount;
        data["pendingAmount"] = this.pendingAmount;
        data["mixedAmount"] = this.mixedAmount;
        data["cancelledAmount"] = this.cancelledAmount;
        return data; 
    }
}

export interface IOrderItemForDeliveryDto {
    recipe?: Recipe | undefined;
    amount: number;
    pendingAmount: number;
    mixedAmount: number;
    cancelledAmount: number;
}

export class OrderForDeliverySearchParamsDto implements IOrderForDeliverySearchParamsDto {

    constructor(data?: IOrderForDeliverySearchParamsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): OrderForDeliverySearchParamsDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrderForDeliverySearchParamsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IOrderForDeliverySearchParamsDto {
}

export class OrderCreateDto implements IOrderCreateDto {
    items?: OrderCreateItemDto[] | undefined;
    clientId!: number;
    requestedDate!: Date;

    constructor(data?: IOrderCreateDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(OrderCreateItemDto.fromJS(item));
            }
            this.clientId = _data["clientId"];
            this.requestedDate = _data["requestedDate"] ? new Date(_data["requestedDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): OrderCreateDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrderCreateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["clientId"] = this.clientId;
        data["requestedDate"] = this.requestedDate ? this.requestedDate.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IOrderCreateDto {
    items?: OrderCreateItemDto[] | undefined;
    clientId: number;
    requestedDate: Date;
}

export class OrderCreateItemDto implements IOrderCreateItemDto {
    recipeId!: number;
    amount!: number;

    constructor(data?: IOrderCreateItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.recipeId = _data["recipeId"];
            this.amount = _data["amount"];
        }
    }

    static fromJS(data: any): OrderCreateItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrderCreateItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["recipeId"] = this.recipeId;
        data["amount"] = this.amount;
        return data; 
    }
}

export interface IOrderCreateItemDto {
    recipeId: number;
    amount: number;
}

export class OrderDetailsDto implements IOrderDetailsDto {
    id!: number;
    items?: OrderDetailsItemDto[] | undefined;
    client?: ClientDto | undefined;
    orderCreated!: Date;
    requestedDate!: Date;
    orderState!: OrderState;
    associatedBatches?: AssociatedBatchDto[] | undefined;

    constructor(data?: IOrderDetailsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(OrderDetailsItemDto.fromJS(item));
            }
            this.client = _data["client"] ? ClientDto.fromJS(_data["client"]) : <any>undefined;
            this.orderCreated = _data["orderCreated"] ? new Date(_data["orderCreated"].toString()) : <any>undefined;
            this.requestedDate = _data["requestedDate"] ? new Date(_data["requestedDate"].toString()) : <any>undefined;
            this.orderState = _data["orderState"];
            if (Array.isArray(_data["associatedBatches"])) {
                this.associatedBatches = [] as any;
                for (let item of _data["associatedBatches"])
                    this.associatedBatches!.push(AssociatedBatchDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): OrderDetailsDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrderDetailsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["client"] = this.client ? this.client.toJSON() : <any>undefined;
        data["orderCreated"] = this.orderCreated ? this.orderCreated.toISOString() : <any>undefined;
        data["requestedDate"] = this.requestedDate ? this.requestedDate.toISOString() : <any>undefined;
        data["orderState"] = this.orderState;
        if (Array.isArray(this.associatedBatches)) {
            data["associatedBatches"] = [];
            for (let item of this.associatedBatches)
                data["associatedBatches"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IOrderDetailsDto {
    id: number;
    items?: OrderDetailsItemDto[] | undefined;
    client?: ClientDto | undefined;
    orderCreated: Date;
    requestedDate: Date;
    orderState: OrderState;
    associatedBatches?: AssociatedBatchDto[] | undefined;
}

export class OrderDetailsItemDto implements IOrderDetailsItemDto {
    recipe?: Recipe | undefined;
    amount!: number;
    selectedMixingAmount!: number;
    mixedAmount!: number;
    cancelledAmount!: number;
    pendingAmount!: number;

    constructor(data?: IOrderDetailsItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.recipe = _data["recipe"] ? Recipe.fromJS(_data["recipe"]) : <any>undefined;
            this.amount = _data["amount"];
            this.selectedMixingAmount = _data["selectedMixingAmount"];
            this.mixedAmount = _data["mixedAmount"];
            this.cancelledAmount = _data["cancelledAmount"];
            this.pendingAmount = _data["pendingAmount"];
        }
    }

    static fromJS(data: any): OrderDetailsItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrderDetailsItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["recipe"] = this.recipe ? this.recipe.toJSON() : <any>undefined;
        data["amount"] = this.amount;
        data["selectedMixingAmount"] = this.selectedMixingAmount;
        data["mixedAmount"] = this.mixedAmount;
        data["cancelledAmount"] = this.cancelledAmount;
        data["pendingAmount"] = this.pendingAmount;
        return data; 
    }
}

export interface IOrderDetailsItemDto {
    recipe?: Recipe | undefined;
    amount: number;
    selectedMixingAmount: number;
    mixedAmount: number;
    cancelledAmount: number;
    pendingAmount: number;
}

export class AssociatedBatchDto implements IAssociatedBatchDto {
    mixingBatchId!: number;
    batchCompleted!: boolean;
    name?: string | undefined;
    created!: Date;
    items?: MixingBatchItemDto[] | undefined;

    constructor(data?: IAssociatedBatchDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.mixingBatchId = _data["mixingBatchId"];
            this.batchCompleted = _data["batchCompleted"];
            this.name = _data["name"];
            this.created = _data["created"] ? new Date(_data["created"].toString()) : <any>undefined;
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(MixingBatchItemDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AssociatedBatchDto {
        data = typeof data === 'object' ? data : {};
        let result = new AssociatedBatchDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["mixingBatchId"] = this.mixingBatchId;
        data["batchCompleted"] = this.batchCompleted;
        data["name"] = this.name;
        data["created"] = this.created ? this.created.toISOString() : <any>undefined;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IAssociatedBatchDto {
    mixingBatchId: number;
    batchCompleted: boolean;
    name?: string | undefined;
    created: Date;
    items?: MixingBatchItemDto[] | undefined;
}

export class OrderItemCancellationDto implements IOrderItemCancellationDto {
    orderId!: number;
    recipeId!: number;
    amount!: number;

    constructor(data?: IOrderItemCancellationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.orderId = _data["orderId"];
            this.recipeId = _data["recipeId"];
            this.amount = _data["amount"];
        }
    }

    static fromJS(data: any): OrderItemCancellationDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrderItemCancellationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orderId"] = this.orderId;
        data["recipeId"] = this.recipeId;
        data["amount"] = this.amount;
        return data; 
    }
}

export interface IOrderItemCancellationDto {
    orderId: number;
    recipeId: number;
    amount: number;
}

export class LazyLoadingResponseOfRecipeDto implements ILazyLoadingResponseOfRecipeDto {
    offset!: number;
    count!: number;
    nextOffset!: number;
    hasMore!: boolean;
    content?: RecipeDto[] | undefined;

    constructor(data?: ILazyLoadingResponseOfRecipeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.offset = _data["offset"];
            this.count = _data["count"];
            this.nextOffset = _data["nextOffset"];
            this.hasMore = _data["hasMore"];
            if (Array.isArray(_data["content"])) {
                this.content = [] as any;
                for (let item of _data["content"])
                    this.content!.push(RecipeDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): LazyLoadingResponseOfRecipeDto {
        data = typeof data === 'object' ? data : {};
        let result = new LazyLoadingResponseOfRecipeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["offset"] = this.offset;
        data["count"] = this.count;
        data["nextOffset"] = this.nextOffset;
        data["hasMore"] = this.hasMore;
        if (Array.isArray(this.content)) {
            data["content"] = [];
            for (let item of this.content)
                data["content"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ILazyLoadingResponseOfRecipeDto {
    offset: number;
    count: number;
    nextOffset: number;
    hasMore: boolean;
    content?: RecipeDto[] | undefined;
}

export class RecipeDetailsDto implements IRecipeDetailsDto {
    id!: number;
    name?: string | undefined;
    canBeOrdered!: boolean;
    descriptionForLabels?: string | undefined;
    pricePerUnit!: number;
    ingredients?: RecipeIngredientDto[] | undefined;

    constructor(data?: IRecipeDetailsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.canBeOrdered = _data["canBeOrdered"];
            this.descriptionForLabels = _data["descriptionForLabels"];
            this.pricePerUnit = _data["pricePerUnit"];
            if (Array.isArray(_data["ingredients"])) {
                this.ingredients = [] as any;
                for (let item of _data["ingredients"])
                    this.ingredients!.push(RecipeIngredientDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RecipeDetailsDto {
        data = typeof data === 'object' ? data : {};
        let result = new RecipeDetailsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["canBeOrdered"] = this.canBeOrdered;
        data["descriptionForLabels"] = this.descriptionForLabels;
        data["pricePerUnit"] = this.pricePerUnit;
        if (Array.isArray(this.ingredients)) {
            data["ingredients"] = [];
            for (let item of this.ingredients)
                data["ingredients"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IRecipeDetailsDto {
    id: number;
    name?: string | undefined;
    canBeOrdered: boolean;
    descriptionForLabels?: string | undefined;
    pricePerUnit: number;
    ingredients?: RecipeIngredientDto[] | undefined;
}

export class RecipeIngredientDto implements IRecipeIngredientDto {
    ingredientId!: number;
    ingredientName?: string | undefined;
    measurementUnit?: string | undefined;
    amount!: number;

    constructor(data?: IRecipeIngredientDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ingredientId = _data["ingredientId"];
            this.ingredientName = _data["ingredientName"];
            this.measurementUnit = _data["measurementUnit"];
            this.amount = _data["amount"];
        }
    }

    static fromJS(data: any): RecipeIngredientDto {
        data = typeof data === 'object' ? data : {};
        let result = new RecipeIngredientDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ingredientId"] = this.ingredientId;
        data["ingredientName"] = this.ingredientName;
        data["measurementUnit"] = this.measurementUnit;
        data["amount"] = this.amount;
        return data; 
    }
}

export interface IRecipeIngredientDto {
    ingredientId: number;
    ingredientName?: string | undefined;
    measurementUnit?: string | undefined;
    amount: number;
}

export class RecipeCreateDto implements IRecipeCreateDto {
    id!: number;
    name?: string | undefined;
    canBeOrdered!: boolean;
    descriptionForLabels?: string | undefined;
    pricePerUnit!: number;
    ingredients?: RecipeCreateIngredientDto[] | undefined;

    constructor(data?: IRecipeCreateDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.canBeOrdered = _data["canBeOrdered"];
            this.descriptionForLabels = _data["descriptionForLabels"];
            this.pricePerUnit = _data["pricePerUnit"];
            if (Array.isArray(_data["ingredients"])) {
                this.ingredients = [] as any;
                for (let item of _data["ingredients"])
                    this.ingredients!.push(RecipeCreateIngredientDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RecipeCreateDto {
        data = typeof data === 'object' ? data : {};
        let result = new RecipeCreateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["canBeOrdered"] = this.canBeOrdered;
        data["descriptionForLabels"] = this.descriptionForLabels;
        data["pricePerUnit"] = this.pricePerUnit;
        if (Array.isArray(this.ingredients)) {
            data["ingredients"] = [];
            for (let item of this.ingredients)
                data["ingredients"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IRecipeCreateDto {
    id: number;
    name?: string | undefined;
    canBeOrdered: boolean;
    descriptionForLabels?: string | undefined;
    pricePerUnit: number;
    ingredients?: RecipeCreateIngredientDto[] | undefined;
}

export class RecipeCreateIngredientDto implements IRecipeCreateIngredientDto {
    ingredientId!: number;
    amount!: number;

    constructor(data?: IRecipeCreateIngredientDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ingredientId = _data["ingredientId"];
            this.amount = _data["amount"];
        }
    }

    static fromJS(data: any): RecipeCreateIngredientDto {
        data = typeof data === 'object' ? data : {};
        let result = new RecipeCreateIngredientDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ingredientId"] = this.ingredientId;
        data["amount"] = this.amount;
        return data; 
    }
}

export interface IRecipeCreateIngredientDto {
    ingredientId: number;
    amount: number;
}

export class UserSecurityInfoDto implements IUserSecurityInfoDto {
    id!: number;
    name?: string | undefined;
    email?: string | undefined;
    client?: ClientDto | undefined;
    roles?: Role[] | undefined;

    constructor(data?: IUserSecurityInfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.email = _data["email"];
            this.client = _data["client"] ? ClientDto.fromJS(_data["client"]) : <any>undefined;
            if (Array.isArray(_data["roles"])) {
                this.roles = [] as any;
                for (let item of _data["roles"])
                    this.roles!.push(item);
            }
        }
    }

    static fromJS(data: any): UserSecurityInfoDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserSecurityInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["email"] = this.email;
        data["client"] = this.client ? this.client.toJSON() : <any>undefined;
        if (Array.isArray(this.roles)) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item);
        }
        return data; 
    }
}

export interface IUserSecurityInfoDto {
    id: number;
    name?: string | undefined;
    email?: string | undefined;
    client?: ClientDto | undefined;
    roles?: Role[] | undefined;
}

export enum Role {
    Admin = 0,
    Order = 1,
    Manufacturing = 2,
    Delivery = 3,
    Dashboard = 4,
    Configuration = 5,
}

export class UserCreateDto implements IUserCreateDto {
    name?: string | undefined;
    email?: string | undefined;
    clientId!: number;
    roles?: Role[] | undefined;

    constructor(data?: IUserCreateDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.email = _data["email"];
            this.clientId = _data["clientId"];
            if (Array.isArray(_data["roles"])) {
                this.roles = [] as any;
                for (let item of _data["roles"])
                    this.roles!.push(item);
            }
        }
    }

    static fromJS(data: any): UserCreateDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserCreateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["email"] = this.email;
        data["clientId"] = this.clientId;
        if (Array.isArray(this.roles)) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item);
        }
        return data; 
    }
}

export interface IUserCreateDto {
    name?: string | undefined;
    email?: string | undefined;
    clientId: number;
    roles?: Role[] | undefined;
}

export class LazyLoadingResponseOfUserShallowDto implements ILazyLoadingResponseOfUserShallowDto {
    offset!: number;
    count!: number;
    nextOffset!: number;
    hasMore!: boolean;
    content?: UserShallowDto[] | undefined;

    constructor(data?: ILazyLoadingResponseOfUserShallowDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.offset = _data["offset"];
            this.count = _data["count"];
            this.nextOffset = _data["nextOffset"];
            this.hasMore = _data["hasMore"];
            if (Array.isArray(_data["content"])) {
                this.content = [] as any;
                for (let item of _data["content"])
                    this.content!.push(UserShallowDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): LazyLoadingResponseOfUserShallowDto {
        data = typeof data === 'object' ? data : {};
        let result = new LazyLoadingResponseOfUserShallowDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["offset"] = this.offset;
        data["count"] = this.count;
        data["nextOffset"] = this.nextOffset;
        data["hasMore"] = this.hasMore;
        if (Array.isArray(this.content)) {
            data["content"] = [];
            for (let item of this.content)
                data["content"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ILazyLoadingResponseOfUserShallowDto {
    offset: number;
    count: number;
    nextOffset: number;
    hasMore: boolean;
    content?: UserShallowDto[] | undefined;
}

export class UserShallowDto implements IUserShallowDto {
    id!: number;
    name?: string | undefined;

    constructor(data?: IUserShallowDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): UserShallowDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserShallowDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

export interface IUserShallowDto {
    id: number;
    name?: string | undefined;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}