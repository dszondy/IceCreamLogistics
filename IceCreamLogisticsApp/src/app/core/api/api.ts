/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.13.2.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable({
    providedIn: 'root'
})
export class AuthClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:5001";
    }

    login(loginDto: LoginDto): Observable<string> {
        let url_ = this.baseUrl + "/auth";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(loginDto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLogin(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLogin(<any>response_);
                } catch (e) {
                    return <Observable<string>><any>_observableThrow(e);
                }
            } else
                return <Observable<string>><any>_observableThrow(response_);
        }));
    }

    protected processLogin(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(<any>null);
    }

    get(): Observable<string[]> {
        let url_ = this.baseUrl + "/auth";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<string[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<string[]>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<string[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string[]>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class ClientClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:5001";
    }

    get(offset: number | undefined, count: number | undefined, search: string | null | undefined): Observable<LazyLoadingResponseOfClient> {
        let url_ = this.baseUrl + "/clients?";
        if (offset === null)
            throw new Error("The parameter 'offset' cannot be null.");
        else if (offset !== undefined)
            url_ += "Offset=" + encodeURIComponent("" + offset) + "&";
        if (count === null)
            throw new Error("The parameter 'count' cannot be null.");
        else if (count !== undefined)
            url_ += "Count=" + encodeURIComponent("" + count) + "&";
        if (search !== undefined && search !== null)
            url_ += "search=" + encodeURIComponent("" + search) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<LazyLoadingResponseOfClient>><any>_observableThrow(e);
                }
            } else
                return <Observable<LazyLoadingResponseOfClient>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<LazyLoadingResponseOfClient> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = LazyLoadingResponseOfClient.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<LazyLoadingResponseOfClient>(<any>null);
    }

    post(clientDto: ClientDto): Observable<ClientDto> {
        let url_ = this.baseUrl + "/clients";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(clientDto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPost(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPost(<any>response_);
                } catch (e) {
                    return <Observable<ClientDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<ClientDto>><any>_observableThrow(response_);
        }));
    }

    protected processPost(response: HttpResponseBase): Observable<ClientDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ClientDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ClientDto>(<any>null);
    }

    put(clientDto: ClientDto): Observable<ClientDto> {
        let url_ = this.baseUrl + "/clients";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(clientDto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPut(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPut(<any>response_);
                } catch (e) {
                    return <Observable<ClientDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<ClientDto>><any>_observableThrow(response_);
        }));
    }

    protected processPut(response: HttpResponseBase): Observable<ClientDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ClientDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ClientDto>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class MixingBatchClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:5001";
    }

    create(clientDto: MixingBatchCreateDto): Observable<MixingBatchCreateDto> {
        let url_ = this.baseUrl + "/mixing-batches";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(clientDto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<MixingBatchCreateDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<MixingBatchCreateDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<MixingBatchCreateDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MixingBatchCreateDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<MixingBatchCreateDto>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class OrdersClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:5001";
    }

    search(from: Date | null | undefined, to: Date | null | undefined, clientName: string | null | undefined, recipeName: string | null | undefined, offset: number | undefined, count: number | undefined): Observable<LazyLoadingResponseOfOrderDto> {
        let url_ = this.baseUrl + "/orders?";
        if (from !== undefined && from !== null)
            url_ += "From=" + encodeURIComponent(from ? "" + from.toJSON() : "") + "&";
        if (to !== undefined && to !== null)
            url_ += "To=" + encodeURIComponent(to ? "" + to.toJSON() : "") + "&";
        if (clientName !== undefined && clientName !== null)
            url_ += "ClientName=" + encodeURIComponent("" + clientName) + "&";
        if (recipeName !== undefined && recipeName !== null)
            url_ += "RecipeName=" + encodeURIComponent("" + recipeName) + "&";
        if (offset === null)
            throw new Error("The parameter 'offset' cannot be null.");
        else if (offset !== undefined)
            url_ += "Offset=" + encodeURIComponent("" + offset) + "&";
        if (count === null)
            throw new Error("The parameter 'count' cannot be null.");
        else if (count !== undefined)
            url_ += "Count=" + encodeURIComponent("" + count) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSearch(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSearch(<any>response_);
                } catch (e) {
                    return <Observable<LazyLoadingResponseOfOrderDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<LazyLoadingResponseOfOrderDto>><any>_observableThrow(response_);
        }));
    }

    protected processSearch(response: HttpResponseBase): Observable<LazyLoadingResponseOfOrderDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = LazyLoadingResponseOfOrderDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<LazyLoadingResponseOfOrderDto>(<any>null);
    }

    placeOrder(order: OrderDto): Observable<OrderDto> {
        let url_ = this.baseUrl + "/orders";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(order);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPlaceOrder(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPlaceOrder(<any>response_);
                } catch (e) {
                    return <Observable<OrderDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<OrderDto>><any>_observableThrow(response_);
        }));
    }

    protected processPlaceOrder(response: HttpResponseBase): Observable<OrderDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OrderDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<OrderDto>(<any>null);
    }

    searchIncompleteOrders(from: Date | null | undefined, to: Date | null | undefined, clientName: string | null | undefined, recipeName: string | null | undefined, offset: number | undefined, count: number | undefined): Observable<LazyLoadingResponseOfOrderPartDto> {
        let url_ = this.baseUrl + "/orders/incomplete?";
        if (from !== undefined && from !== null)
            url_ += "From=" + encodeURIComponent(from ? "" + from.toJSON() : "") + "&";
        if (to !== undefined && to !== null)
            url_ += "To=" + encodeURIComponent(to ? "" + to.toJSON() : "") + "&";
        if (clientName !== undefined && clientName !== null)
            url_ += "ClientName=" + encodeURIComponent("" + clientName) + "&";
        if (recipeName !== undefined && recipeName !== null)
            url_ += "RecipeName=" + encodeURIComponent("" + recipeName) + "&";
        if (offset === null)
            throw new Error("The parameter 'offset' cannot be null.");
        else if (offset !== undefined)
            url_ += "Offset=" + encodeURIComponent("" + offset) + "&";
        if (count === null)
            throw new Error("The parameter 'count' cannot be null.");
        else if (count !== undefined)
            url_ += "Count=" + encodeURIComponent("" + count) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSearchIncompleteOrders(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSearchIncompleteOrders(<any>response_);
                } catch (e) {
                    return <Observable<LazyLoadingResponseOfOrderPartDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<LazyLoadingResponseOfOrderPartDto>><any>_observableThrow(response_);
        }));
    }

    protected processSearchIncompleteOrders(response: HttpResponseBase): Observable<LazyLoadingResponseOfOrderPartDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = LazyLoadingResponseOfOrderPartDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<LazyLoadingResponseOfOrderPartDto>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class RecipeClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:5001";
    }

    get(offset: number | undefined, count: number | undefined, search: string | null | undefined): Observable<LazyLoadingResponseOfRecipe> {
        let url_ = this.baseUrl + "/recipes?";
        if (offset === null)
            throw new Error("The parameter 'offset' cannot be null.");
        else if (offset !== undefined)
            url_ += "Offset=" + encodeURIComponent("" + offset) + "&";
        if (count === null)
            throw new Error("The parameter 'count' cannot be null.");
        else if (count !== undefined)
            url_ += "Count=" + encodeURIComponent("" + count) + "&";
        if (search !== undefined && search !== null)
            url_ += "search=" + encodeURIComponent("" + search) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<LazyLoadingResponseOfRecipe>><any>_observableThrow(e);
                }
            } else
                return <Observable<LazyLoadingResponseOfRecipe>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<LazyLoadingResponseOfRecipe> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = LazyLoadingResponseOfRecipe.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<LazyLoadingResponseOfRecipe>(<any>null);
    }

    post(recipeDto: RecipeDto): Observable<RecipeDto> {
        let url_ = this.baseUrl + "/recipes";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(recipeDto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPost(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPost(<any>response_);
                } catch (e) {
                    return <Observable<RecipeDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<RecipeDto>><any>_observableThrow(response_);
        }));
    }

    protected processPost(response: HttpResponseBase): Observable<RecipeDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RecipeDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RecipeDto>(<any>null);
    }

    put(recipeDto: RecipeDto): Observable<RecipeDto> {
        let url_ = this.baseUrl + "/recipes";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(recipeDto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPut(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPut(<any>response_);
                } catch (e) {
                    return <Observable<RecipeDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<RecipeDto>><any>_observableThrow(response_);
        }));
    }

    protected processPut(response: HttpResponseBase): Observable<RecipeDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RecipeDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RecipeDto>(<any>null);
    }
}

export class LoginDto implements ILoginDto {
    email!: string;
    password!: string;

    constructor(data?: ILoginDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): LoginDto {
        data = typeof data === 'object' ? data : {};
        let result = new LoginDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["password"] = this.password;
        return data; 
    }
}

export interface ILoginDto {
    email: string;
    password: string;
}

export class LazyLoadingResponseOfClient implements ILazyLoadingResponseOfClient {
    offset!: number;
    count!: number;
    nextOffset!: number;
    hasMore!: boolean;
    content!: Client[];

    constructor(data?: ILazyLoadingResponseOfClient) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.content = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.offset = _data["offset"];
            this.count = _data["count"];
            this.nextOffset = _data["nextOffset"];
            this.hasMore = _data["hasMore"];
            if (Array.isArray(_data["content"])) {
                this.content = [] as any;
                for (let item of _data["content"])
                    this.content!.push(Client.fromJS(item));
            }
        }
    }

    static fromJS(data: any): LazyLoadingResponseOfClient {
        data = typeof data === 'object' ? data : {};
        let result = new LazyLoadingResponseOfClient();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["offset"] = this.offset;
        data["count"] = this.count;
        data["nextOffset"] = this.nextOffset;
        data["hasMore"] = this.hasMore;
        if (Array.isArray(this.content)) {
            data["content"] = [];
            for (let item of this.content)
                data["content"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ILazyLoadingResponseOfClient {
    offset: number;
    count: number;
    nextOffset: number;
    hasMore: boolean;
    content: Client[];
}

export class Client implements IClient {
    id!: number;
    name!: string;
    address!: Address;

    constructor(data?: IClient) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.address = new Address();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.address = _data["address"] ? Address.fromJS(_data["address"]) : new Address();
        }
    }

    static fromJS(data: any): Client {
        data = typeof data === 'object' ? data : {};
        let result = new Client();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["address"] = this.address ? this.address.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IClient {
    id: number;
    name: string;
    address: Address;
}

export class Address implements IAddress {
    country!: string;
    zip!: string;
    region!: string;
    city!: string;
    addressLine!: string;

    constructor(data?: IAddress) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.country = _data["country"];
            this.zip = _data["zip"];
            this.region = _data["region"];
            this.city = _data["city"];
            this.addressLine = _data["addressLine"];
        }
    }

    static fromJS(data: any): Address {
        data = typeof data === 'object' ? data : {};
        let result = new Address();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["country"] = this.country;
        data["zip"] = this.zip;
        data["region"] = this.region;
        data["city"] = this.city;
        data["addressLine"] = this.addressLine;
        return data; 
    }
}

export interface IAddress {
    country: string;
    zip: string;
    region: string;
    city: string;
    addressLine: string;
}

export class ClientDto extends Client implements IClientDto {

    constructor(data?: IClientDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): ClientDto {
        data = typeof data === 'object' ? data : {};
        let result = new ClientDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IClientDto extends IClient {
}

export class MixingBatchCreate implements IMixingBatchCreate {
    id?: number | undefined;
    members!: MixingBatchCreateMember[];

    constructor(data?: IMixingBatchCreate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.members = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            if (Array.isArray(_data["members"])) {
                this.members = [] as any;
                for (let item of _data["members"])
                    this.members!.push(MixingBatchCreateMember.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MixingBatchCreate {
        data = typeof data === 'object' ? data : {};
        let result = new MixingBatchCreate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        if (Array.isArray(this.members)) {
            data["members"] = [];
            for (let item of this.members)
                data["members"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IMixingBatchCreate {
    id?: number | undefined;
    members: MixingBatchCreateMember[];
}

export class MixingBatchCreateDto extends MixingBatchCreate implements IMixingBatchCreateDto {

    constructor(data?: IMixingBatchCreateDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): MixingBatchCreateDto {
        data = typeof data === 'object' ? data : {};
        let result = new MixingBatchCreateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IMixingBatchCreateDto extends IMixingBatchCreate {
}

export class MixingBatchCreateMember implements IMixingBatchCreateMember {
    orderId!: number;
    items!: MixingBatchCreateItem[];

    constructor(data?: IMixingBatchCreateMember) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.items = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.orderId = _data["orderId"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(MixingBatchCreateItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MixingBatchCreateMember {
        data = typeof data === 'object' ? data : {};
        let result = new MixingBatchCreateMember();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orderId"] = this.orderId;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IMixingBatchCreateMember {
    orderId: number;
    items: MixingBatchCreateItem[];
}

export class MixingBatchCreateItem implements IMixingBatchCreateItem {
    recipeId!: number;
    amount!: number;

    constructor(data?: IMixingBatchCreateItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.recipeId = _data["recipeId"];
            this.amount = _data["amount"];
        }
    }

    static fromJS(data: any): MixingBatchCreateItem {
        data = typeof data === 'object' ? data : {};
        let result = new MixingBatchCreateItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["recipeId"] = this.recipeId;
        data["amount"] = this.amount;
        return data; 
    }
}

export interface IMixingBatchCreateItem {
    recipeId: number;
    amount: number;
}

export class LazyLoadingResponseOfOrderDto implements ILazyLoadingResponseOfOrderDto {
    offset!: number;
    count!: number;
    nextOffset!: number;
    hasMore!: boolean;
    content!: OrderDto[];

    constructor(data?: ILazyLoadingResponseOfOrderDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.content = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.offset = _data["offset"];
            this.count = _data["count"];
            this.nextOffset = _data["nextOffset"];
            this.hasMore = _data["hasMore"];
            if (Array.isArray(_data["content"])) {
                this.content = [] as any;
                for (let item of _data["content"])
                    this.content!.push(OrderDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): LazyLoadingResponseOfOrderDto {
        data = typeof data === 'object' ? data : {};
        let result = new LazyLoadingResponseOfOrderDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["offset"] = this.offset;
        data["count"] = this.count;
        data["nextOffset"] = this.nextOffset;
        data["hasMore"] = this.hasMore;
        if (Array.isArray(this.content)) {
            data["content"] = [];
            for (let item of this.content)
                data["content"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ILazyLoadingResponseOfOrderDto {
    offset: number;
    count: number;
    nextOffset: number;
    hasMore: boolean;
    content: OrderDto[];
}

export class Order implements IOrder {
    id!: number;
    items!: OrderItem[];
    client!: Client;
    orderCreated!: Date;
    requestedDate!: Date;
    orderState!: OrderState;

    constructor(data?: IOrder) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.items = [];
            this.client = new Client();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(OrderItem.fromJS(item));
            }
            this.client = _data["client"] ? Client.fromJS(_data["client"]) : new Client();
            this.orderCreated = _data["orderCreated"] ? new Date(_data["orderCreated"].toString()) : <any>undefined;
            this.requestedDate = _data["requestedDate"] ? new Date(_data["requestedDate"].toString()) : <any>undefined;
            this.orderState = _data["orderState"];
        }
    }

    static fromJS(data: any): Order {
        data = typeof data === 'object' ? data : {};
        let result = new Order();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["client"] = this.client ? this.client.toJSON() : <any>undefined;
        data["orderCreated"] = this.orderCreated ? this.orderCreated.toISOString() : <any>undefined;
        data["requestedDate"] = this.requestedDate ? this.requestedDate.toISOString() : <any>undefined;
        data["orderState"] = this.orderState;
        return data; 
    }
}

export interface IOrder {
    id: number;
    items: OrderItem[];
    client: Client;
    orderCreated: Date;
    requestedDate: Date;
    orderState: OrderState;
}

export class OrderDto extends Order implements IOrderDto {

    constructor(data?: IOrderDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): OrderDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrderDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IOrderDto extends IOrder {
}

export class OrderItem implements IOrderItem {
    recipe!: Recipe;
    amount!: number;

    constructor(data?: IOrderItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.recipe = new Recipe();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.recipe = _data["recipe"] ? Recipe.fromJS(_data["recipe"]) : new Recipe();
            this.amount = _data["amount"];
        }
    }

    static fromJS(data: any): OrderItem {
        data = typeof data === 'object' ? data : {};
        let result = new OrderItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["recipe"] = this.recipe ? this.recipe.toJSON() : <any>undefined;
        data["amount"] = this.amount;
        return data; 
    }
}

export interface IOrderItem {
    recipe: Recipe;
    amount: number;
}

export class Recipe implements IRecipe {
    id!: number;
    name!: string;
    canBeOrdered!: boolean;

    constructor(data?: IRecipe) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.canBeOrdered = _data["canBeOrdered"];
        }
    }

    static fromJS(data: any): Recipe {
        data = typeof data === 'object' ? data : {};
        let result = new Recipe();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["canBeOrdered"] = this.canBeOrdered;
        return data; 
    }
}

export interface IRecipe {
    id: number;
    name: string;
    canBeOrdered: boolean;
}

export enum OrderState {
    Cancelled = 0,
    Active = 1,
    Complete = 2,
    Delivered = 3,
}

export class LazyLoadingResponseOfOrderPartDto implements ILazyLoadingResponseOfOrderPartDto {
    offset!: number;
    count!: number;
    nextOffset!: number;
    hasMore!: boolean;
    content!: OrderPartDto[];

    constructor(data?: ILazyLoadingResponseOfOrderPartDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.content = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.offset = _data["offset"];
            this.count = _data["count"];
            this.nextOffset = _data["nextOffset"];
            this.hasMore = _data["hasMore"];
            if (Array.isArray(_data["content"])) {
                this.content = [] as any;
                for (let item of _data["content"])
                    this.content!.push(OrderPartDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): LazyLoadingResponseOfOrderPartDto {
        data = typeof data === 'object' ? data : {};
        let result = new LazyLoadingResponseOfOrderPartDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["offset"] = this.offset;
        data["count"] = this.count;
        data["nextOffset"] = this.nextOffset;
        data["hasMore"] = this.hasMore;
        if (Array.isArray(this.content)) {
            data["content"] = [];
            for (let item of this.content)
                data["content"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ILazyLoadingResponseOfOrderPartDto {
    offset: number;
    count: number;
    nextOffset: number;
    hasMore: boolean;
    content: OrderPartDto[];
}

export class OrderPart implements IOrderPart {
    id!: number;
    order!: Order;
    incompleteItems!: OrderItem[];

    constructor(data?: IOrderPart) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.order = new Order();
            this.incompleteItems = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.order = _data["order"] ? Order.fromJS(_data["order"]) : new Order();
            if (Array.isArray(_data["incompleteItems"])) {
                this.incompleteItems = [] as any;
                for (let item of _data["incompleteItems"])
                    this.incompleteItems!.push(OrderItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): OrderPart {
        data = typeof data === 'object' ? data : {};
        let result = new OrderPart();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["order"] = this.order ? this.order.toJSON() : <any>undefined;
        if (Array.isArray(this.incompleteItems)) {
            data["incompleteItems"] = [];
            for (let item of this.incompleteItems)
                data["incompleteItems"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IOrderPart {
    id: number;
    order: Order;
    incompleteItems: OrderItem[];
}

export class OrderPartDto extends OrderPart implements IOrderPartDto {

    constructor(data?: IOrderPartDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): OrderPartDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrderPartDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IOrderPartDto extends IOrderPart {
}

export class LazyLoadingResponseOfRecipe implements ILazyLoadingResponseOfRecipe {
    offset!: number;
    count!: number;
    nextOffset!: number;
    hasMore!: boolean;
    content!: Recipe[];

    constructor(data?: ILazyLoadingResponseOfRecipe) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.content = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.offset = _data["offset"];
            this.count = _data["count"];
            this.nextOffset = _data["nextOffset"];
            this.hasMore = _data["hasMore"];
            if (Array.isArray(_data["content"])) {
                this.content = [] as any;
                for (let item of _data["content"])
                    this.content!.push(Recipe.fromJS(item));
            }
        }
    }

    static fromJS(data: any): LazyLoadingResponseOfRecipe {
        data = typeof data === 'object' ? data : {};
        let result = new LazyLoadingResponseOfRecipe();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["offset"] = this.offset;
        data["count"] = this.count;
        data["nextOffset"] = this.nextOffset;
        data["hasMore"] = this.hasMore;
        if (Array.isArray(this.content)) {
            data["content"] = [];
            for (let item of this.content)
                data["content"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ILazyLoadingResponseOfRecipe {
    offset: number;
    count: number;
    nextOffset: number;
    hasMore: boolean;
    content: Recipe[];
}

export class RecipeDto implements IRecipeDto {
    id!: number;
    name!: string;
    canBeOrdered!: boolean;

    constructor(data?: IRecipeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.canBeOrdered = _data["canBeOrdered"];
        }
    }

    static fromJS(data: any): RecipeDto {
        data = typeof data === 'object' ? data : {};
        let result = new RecipeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["canBeOrdered"] = this.canBeOrdered;
        return data; 
    }
}

export interface IRecipeDto {
    id: number;
    name: string;
    canBeOrdered: boolean;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}